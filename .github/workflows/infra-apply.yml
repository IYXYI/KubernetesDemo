name: AKS - Terraform & App Deploy

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: infra/terraform
        run: terraform init

      - name: Terraform Plan
        working-directory: infra/terraform
        env:
          TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: terraform plan -out tfplan

      - name: Terraform Apply
        working-directory: infra/terraform
        env:
          TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: terraform apply -auto-approve tfplan

      - name: Read outputs
        id: tfout
        working-directory: infra/terraform
        run: |
          echo "RG_NAME=$(terraform output -raw rg_name)" >> $GITHUB_OUTPUT
          echo "AKS_NAME=$(terraform output -raw aks_name)" >> $GITHUB_OUTPUT

      - name: Install kubectl & Azure CLI
        uses: azure/cli@v2
        with:
          inlineScript: |
            az aks get-credentials -g "${{ steps.tfout.outputs.RG_NAME }}" -n "${{ steps.tfout.outputs.AKS_NAME }}" --overwrite-existing
            echo "Kube context configured."

      - name: Deploy app manifests
        run: |
          kubectl apply -f apps/guestbook/namespace.yaml
          kubectl apply -f apps/guestbook/deployment.yaml
          kubectl apply -f apps/guestbook/service.yaml

      - name: Wait for external IP
        run: |
          echo "Waiting for LoadBalancer IP..."
          for i in {1..30}; do
            IP=$(kubectl get svc -n guestbook guestbook -o jsonpath='{.status.loadBalancer.ingress[0].ip}' || true)
            if [ -n "$IP" ]; then echo "EXTERNAL_IP=$IP" >> $GITHUB_ENV; break; fi
            sleep 10
          done
          kubectl get svc -n guestbook guestbook -o wide || true

      - name: Expose URL
        if: env.EXTERNAL_IP != ''
        run: |
          echo "App disponible: http://${EXTERNAL_IP}"
